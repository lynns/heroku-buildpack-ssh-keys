#!/usr/local/bin/ruby

require 'tmpdir'
require 'fileutils'

def indent(str)
  str.split("\n").each do |line|
    puts "       #{line}"
  end
end

def arrow(str)
  str.split("\n").each do |line|
    puts "-----> #{line}"
  end
end

arrow "Checking for a valid SSH key"

Dir.mktmpdir "env_ssh" do |dir|
  if !File::exists?("#{ARGV[0]}/deploy/id_rsa")
    arrow "Can't find the key file"
    exit 1
  end

  arrow "Copying ssh key file from repo"
  FileUtils.cp "#{ARGV[0]}/deploy/id_rsa", "#{dir}/env_ssh_key"
  FileUtils.chmod 0600, "#{dir}/env_ssh_key"

  `ssh-keygen -e -f #{dir}/env_ssh_key < /dev/null > #{dir}/env_ssh_key.pub.rfc 2>/dev/null`
  `ssh-keygen -i -f #{dir}/env_ssh_key.pub.rfc > #{dir}/env_ssh_key.pub 2>/dev/null`
  key = `ssh-keygen -l -f #{dir}/env_ssh_key.pub | awk '{print $2}' | tr -ds ':' '' | egrep -ie "[a-f0-9]{32}" 2>/dev/null`

  # if key is empty, abort the build
  if key.strip == ''
    arrow "SSH_KEY was invalid"
    exit 1
  end

  ENV.delete('SSH_KEY')
  File.open("#{dir}/known_hosts", 'w+', 0700) do |f|
    f.puts "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=="
  end
  File.open("#{dir}/git_ssh", 'w+', 0700) do |f|
    f.puts "ssh -i #{dir}/env_ssh_key -o 'UserKnownHostsFile #{dir}/known_hosts' $*"
  end
  ENV['GIT_SSH'] = "#{dir}/git_ssh"

  arrow "Checking GitHub identity"
  indent `$GIT_SSH -T git@github.com 2>&1`

  # Execute the real buildpack
  Dir.mktmpdir "proxy_pack" do |pack_dir|

    FileUtils.rm_rf pack_dir

    pack_url = ENV['PROXY_PACK'] || "https://github.com/martinrehfeld/heroku-buildpack-multi.git"
    url, *extra = pack_url.split '#'
    branch = extra.join

    `git clone #{url} #{pack_dir} >/dev/null 2>&1`
    Dir.chdir pack_dir do

      if branch != ''
        `git checkout #{branch} >/dev/null 2>&1`
      end

      `chmod +x ./bin/detect`
      `chmod +x ./bin/compile`
      `chmod +x ./bin/release`
      framework = `./bin/detect #{ARGV[0]}`

      if $?.to_i == 0
        arrow "Found proxy framework #{framework}"

        git_dir = ENV['GIT_DIR']
        ENV.delete('GIT_DIR')
        system "./bin/compile #{ARGV[0]} #{ARGV[1]}"
        $stdout.flush

        status = $?
        if status.to_i != 0
          puts "Last exit: #{status}"
          `touch #{ARGV[0]}/failed`
          exit status.to_i
        end
        
        ENV['GIT_DIR'] = git_dir
        indent "Using release configuration from proxy framework #{framework}"
      else
        indent "The proxy pack at #{pack_url} didn't think it applied to this app."
      end

    end

  end

end